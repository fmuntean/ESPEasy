[platformio]
;default_envs = MFD_ESP8266_4M1M_40MHz_QIO_VCC #testing to see if there is a problem with the flash for BUCATARIE-JOS and USA-FATA they seem to have lots of exceptions
;default_envs = normal_ESP8266_4M1M
;default_envs = MFD_ESP32_4M316k
;default_envs = MFD_ESP32S2_dev
;default_envs = MFD_1M_OTA_WIFI
;default_envs = MFD_ESP8266_4M1M_80MHz_QIO_VCC

default_envs = MFD_ESP201

;default_envs = MFD_1M_OTA ; MFD_ESP07_1M_OTA ;, normal_ESP8266_1M_VCC, normal_alt_wifi_ESP8266_1M_VCC
# these are the main boards that I use #
;default_envs = MFD_LIGHT_2M256_80MHZ_DOUT_VCC, MFD_ESP8266_4M1M_80MHz_QIO_VCC, MFD_NodeMCU_09, MFD_1M_OTA,  MFD_SONOFF_POW_4M1M, MFD_ESP8285_SONOFF_DUAL


#default_envs = mfd_ESP8266_4M1M_beta
#default_envs = mfd_ESP8266_4M1M_core230, mfd_ESP8266_4M1M_core250
#default_envs =  mfd_ESP8266_4M1M_core240, mfd_ESP8266_4M1M_core241, mfd_ESP8266_4M1M_core242,  mfd_ESP8266_4M1M_core252, mfd_ESP8266_4M1M_core260, mfd_ESP8266_4M1M_core261, mfd_ESP8266_4M1M_core261_sdk3, mfd_ESP8266_4M1M_core262, mfd_ESP8266_4M1M_core262_sdk3, mfd_ESP8266_4M1M_beta

#default_envs = MFD_LIGHT_2M256_80MHZ_DOUT_VCC,MFD_ESP8266_4M1M_40MHz_QIO


;default_envs = MFD_ESP07_1M_OTA_VCC
;default_envs =  MFD_ESP8266_4M1M_80MHz_DIO_VCC
;default_envs =  MFD_ESP8266_4M1M_80MHz_QIO_VCC

################################# MFD VERSIONS ###########################################
# versions specially designed for my specific boards                                     #
##########################################################################################


[MFD]
lib_deps = ${esp8266_4M1M.lib_deps}
lib_ignore   = ${esp82xx_common.lib_ignore}, MX3166
lib_ignore_for_minimal   = ${esp82xx_common.lib_ignore}, Adafruit ILI9341, Adafruit GFX Library, Adafruit BusIO, MX3166, TinyGPSPlus, ArduinoOTA, Adafruit SGP30 Sensor, Adafruit Unified Sensor, Adafruit MPR121, Adafruit TSL2591 Library, Adafruit Motor Shield V2 Library, Adafruit NeoPixel, Adafruit SGP30 Sensor, Adafruit TCS34725, AS_BH1750, ESP8266_SSD1306, HLW8012, SD, LiquidCrystal_I2C, IRremoteESP8266, Servo(esp8266), CHT16K33 LED Matrix Library, AS_BH1750, SerialSensors, SDM, SparkFun APDS9960 RGB and Gesture Sensor, SD(esp8266), ESP8266_SSD1306, ESPeasySoftwareSerial, MechInputs, AM2320, Blynk, DLBus, RN2xx3 Arduino Library, MFRC522, LOLIN_EPD  
;build_flags  = ${core_2_6_1.build_flags} -D DONT_USE_SERVO -D USE_CUSTOM_H
;platform     = ${core_2_6_1.platform}
build_flags  = ${regular_platform.build_flags}
                 -D DONT_USE_SERVO 
                 -D WEBSERVER_NEW_UI
                 -D USE_CUSTOM_H
platform     = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}

extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py

;core_2_4_2 the buzzer does not seem to work

[MFD_ESP8266]
extends          = esp8266_4M1M ;esp82xx_common
platform         = ${MFD.platform}
lib_deps         = ${MFD.lib_deps}
lib_ignore       = ${MFD.lib_ignore}
lib_ldf_mode     = ${env.lib_ldf_mode}
framework        = ${env.framework}
upload_speed     = ${env.upload_speed}
board            = esp12e
board_build.flash_mode = qio
board_build.f_flash = 80000000L
build_flags      = ${MFD.build_flags} 
                   ${esp8266_4M1M.build_flags} 
                   -D PLUGIN_BUILD_CUSTOM
platform_packages = ${regular_platform.platform_packages}
extra_scripts    = ${esp8266_4M1M.extra_scripts}
                  ; pre:tools/pio/generate-compiletime-defines.py
                   post:post_build.py


[env:mfd_ESP8266_4M1M_core230]
extends = MFD_ESP8266
build_flags  = ${core_2_3_0.build_flags} -D CORE_2_3_0 -D CORE_PRE_2_5_0 -D LWIP_INTERNAL -D DONT_USE_SERVO -D USE_CUSTOM_H -D MFD_PLUGIN_SET_PROD
platform     = ${core_2_3_0.platform}

[env:mfd_ESP8266_4M1M_core240]
extends = MFD_ESP8266
build_flags  = ${core_2_4_0.build_flags} -D CORE_PRE_2_5_0 -D LWIP_INTERNAL -D DONT_USE_SERVO -D USE_CUSTOM_H -D MFD_PLUGIN_SET_PROD
platform     = ${core_2_4_0.platform}

[env:mfd_ESP8266_4M1M_core241]
extends = MFD_ESP8266
build_flags  = ${core_2_4_1.build_flags} -D DONT_USE_SERVO -D USE_CUSTOM_H -D MFD_PLUGIN_SET_PROD
platform     = ${core_2_4_1.platform}

[env:mfd_ESP8266_4M1M_core242]
extends = MFD_ESP8266
build_flags  = ${core_2_4_2.build_flags} -D DONT_USE_SERVO -D USE_CUSTOM_H -D MFD_PLUGIN_SET_PROD
platform     = ${core_2_4_2.platform}

[env:mfd_ESP8266_4M1M_core250]
extends = MFD_ESP8266
build_flags  = -D BUILD_GIT='"${sysenv.TRAVIS_TAG}"'
                -DNDEBUG
                -mtarget-align
                -DVTABLES_IN_FLASH
                -fno-exceptions
                -lstdc++
                -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY_LOW_FLASH
                -DPUYA_SUPPORT=1
                -DCORE_PRE_2_5_0
                -DDONT_USE_SERVO 
                -DUSE_CUSTOM_H 
                -DMFD_PLUGIN_SET_PROD
platform     = ${core_2_5_0.platform}

[env:mfd_ESP8266_4M1M_core252]
extends = MFD_ESP8266
build_flags  = ${core_2_5_2.build_flags} -D DONT_USE_SERVO -D USE_CUSTOM_H -D MFD_PLUGIN_SET_PROD
platform     = ${core_2_5_2.platform}


[env:mfd_ESP8266_4M1M_beta]
extends = MFD_ESP8266
build_flags = ${beta_platform.build_flags} ${esp8266_4M1M.build_flags} -D DONT_USE_SERVO -D USE_CUSTOM_H  -D MFD_PLUGIN_SET_PROD
platform = ${beta_platform.platform}

;[mxchip_az3166]
;platform = ststm32
;board = mxchip_az3166
;framework = arduino

#MFD: special version for MXChip AZ3166 (Microsoft AzureIOT)
#this is not compiling yet so only uncomment when working on it
;[env:mfd_MX3166_1024]
;lib_compat_mode = 1
;platform = ststm32
;board = mxchip_az3166
;framework = arduino
;lib_deps = ${common.lib_deps}
;lib_extra_dirs = C:\Users\fmuntean\.platformio\packages\framework-arduinostm32mxchip\cores\arduino, C:\Users\fmuntean\.platformio\packages\framework-arduinostm32mxchip\system\hal
# found that MX3166 has many issues with libraries especially the Wire: for now I am disabling everything I can
#PubSubClient, 
;lib_ignore = AS_BH1750, NewPingESP8266, MFRC522, HLW8012, SDM, ESP32_ping, ESP32WebServer,  Adafruit Motor Shield V2 Library, SparkFun APDS9960 RGB and Gesture Sensor, ESPeasySoftwareSerial, Adafruit Unified Sensor, Adafruit TSL2591 Library, Adafruit NeoPixel, Adafruit TCS34725, ESP8266_SSD1306, SerialSensors, MechInputs, IRremoteESP8266, AM2320, Adafruit MPR121, ESPEasy_ESP8266Ping, CHT16K33 LED Matrix Library, LiquidCrystal_I2C
;monitor_speed = 115200
;build_flags = ${common.build_flags}  -W -D PLUGIN_SET_MX3166 -D FEATURE_ADC_VCC=false


[env:MFD_LIGHT_2M256_80MHZ_DOUT_VCC]
extends          = MFD_ESP8266
board_build.flash_mode = dout
board_build.f_flash = 80000000L
build_flags = ${MFD.build_flags} ${espWroom2M256.build_flags} -D MFD_PLUGIN_SET_PROD  -D FEATURE_ADC_VCC=true



[env:MFD_ESP8266_4M1M_80MHz_QIO_VCC]
extends          = MFD_ESP8266
board           = ${MFD_ESP8266.board}
platform        = ${regular_platform.platform}
board_build.flash_mode = qio
board_build.f_flash = 80000000L
build_flags = ${MFD.build_flags} -D MFD_PLUGIN_SET_PROD  -D FEATURE_ADC_VCC=true


[env:MFD_ESP8266_4M1M_80MHz_DIO_VCC]
#currently: Front/Hol-Jos is the only board with this chip installed
extends                 = MFD_ESP8266
board_build.flash_mode  = dio
board_build.f_flash     = 80000000L
build_flags             = ${MFD.build_flags} -D MFD_PLUGIN_SET_PROD -D FEATURE_ADC_VCC=true


[env:MFD_ESP8266_4M1M_40MHz_QIO_VCC]
extends                 = MFD_ESP8266
board_build.flash_mode  = qio
board_build.f_flash     = 40000000L
build_flags             = ${MFD.build_flags} -D MFD_PLUGIN_SET_PROD -D FEATURE_ADC_VCC=true


[env:MFD_NodeMCU_09]
extends                   = MFD_ESP8266
board                     = nodemcu
board_build.flash_mode    = qio
board_build.f_flash       = 80000000L
build_flags               =  ${MFD.build_flags} -D MFD_PLUGIN_SET_PROD -D USES_P248

[env:MFD_ESP201]
extends                   = MFD_ESP8266
board                     = nodemcu
board_build.flash_mode    = qio
board_build.f_flash       = 80000000L
build_flags               = ${regular_platform_alt_wifi.build_flags}
                            ;${core_2_7_4_sdk3.build_flags}
                            ;${MFD.build_flags} 
                            -D MFD_PLUGIN_SET_PROD 
                            -D DONT_USE_SERVO 
                            -D WEBSERVER_NEW_UI
                            -D USE_CUSTOM_H
platform                  = ${core_2_7_4_sdk3.platform}
platform_packages         = ${core_2_7_4_sdk3.platform_packages}
;monitor_speed             = 74880 ;ESP8266 boot speed



[MFD_2_4_2_1M]
extends                   = esp82xx_1M_OTA
platform                  = ${core_2_4_2.platform}
platform_packages         = platformio/framework-arduinoespressif8266 @ 3.20704.0
board                     = esp07
board_build.f_flash       = 80000000L
board_build.flash_mode    = dout
lib_ignore                = ${MFD.lib_ignore_for_minimal}
build_flags               = ${core_2_4_2.build_flags}
                            ${esp82xx_1M_OTA.build_flags}
                            ${minimal_size.build_flags}
                            -D DISABLE_SC16IS752_Serial
                            -D USE_CUSTOM_H
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D SHOW_SYSINFO_JSON
                            ;-D FEATURE_MDNS
                            -D BUILD_NO_DEBUG 
                            -D VTABLES_IN_IRAM
                            -D SIZE_1M 
                            ;-D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py


[MFD_2_7_4_1M]
extends                   = esp82xx_1M_OTA
platform                  = ${core_2_7_4.platform}
platform_packages         = ${core_2_7_4.platform_packages}
board                     = esp07
board_build.f_flash       = 80000000L
board_build.flash_mode    = dout
lib_ignore                = ${MFD.lib_ignore_for_minimal}
build_flags               = ${core_2_7_4.build_flags}
                            ${esp82xx_1M_OTA.build_flags}
                            ;${minimal_size.build_flags}
                            -D DISABLE_SC16IS752_Serial
                            -D USE_CUSTOM_H
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D SHOW_SYSINFO_JSON
                            ;-D FEATURE_MDNS
                            -D BUILD_NO_DEBUG 
                            -D VTABLES_IN_IRAM
                            -D SIZE_1M 
                            ;-D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py


[MFD_ESP07] 
extends                   = esp82xx_1M_OTA
lib_deps                  = https://github.com/TD-er/ESPEasySerial.git#v2.0.5
lib_ignore                = ${MFD.lib_ignore_for_minimal}
                            ${esp8266_custom_common.lib_ignore}
;platform                  = ${core_2_4_2.platform} ; this is the only one that currenty fits in 1M of flash
;platform                = ${core_2_5_2.Platform}

platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
board                     = esp07
board_build.f_flash       = 80000000L
board_build.flash_mode    = dout
build_flags               = ${regular_platform.build_flags}
                            ${esp82xx_1M.build_flags}
                            -D DISABLE_SC16IS752_Serial
                            -D USE_CUSTOM_H
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D SHOW_SYSINFO_JSON
                            ;-D FEATURE_MDNS
                            -D BUILD_NO_DEBUG 
                            -D VTABLES_IN_IRAM
                            -D SIZE_1M 
                            ;-D PIO_FRAMEWORK_ARDUINO_LWIP2_HIGHER_BANDWIDTH_LOW_FLASH
                            -Os
                            -fdata-sections 
                            -ffunction-sections
                            -Wl,--gc-sections
                            -s
build_unflags              =-DVTABLES_IN_FLASH, -O2
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py

[env:MFD_ESP07_1M_OTA]
# my boards are only supporting DOUT
;extends  = MFD_ESP07     ; generates: Flash: [=======   ]  69.7% (used 622804 bytes from 892912 bytes)
;extends  = MFD_2_4_2_1M  ; generates: Flash: [=======   ]  65.2% (used 581852 bytes from 892912 bytes)
;extends   = MFD_2_7_4_1M  ; generates: Flash: [=======   ]  67.8% (used 605096 bytes from 892912 bytes)



[env:MFD_ESP07_1M_OTA_VCC]
extends                   = MFD_ESP07
build_flags               = ${MFD_ESP07.build_flags}
                            -D FEATURE_ADC_VCC=true


[env:mfd_ESP8266_1M_OTA]
extends                   = esp8266_1M_OTA
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8266_1M_OTA.build_flags}
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D USE_CUSTOM_H
                            -D NOTIFIER_SET_NONE
                            -D SHOW_SYSINFO_JSON
                            ;-D FEATURE_MDNS
                            -D BUILD_NO_DEBUG 
                            -D VTABLES_IN_IRAM


[env:MFD_1M_OTA]
extends                   = esp8266_1M_OTA
board                     = esp07
board_build.f_flash       = 80000000L
platform                  = ${regular_platform.platform}
platform_packages         = ${regular_platform.platform_packages}
lib_ignore                = ${MFD.lib_ignore_for_minimal}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8266_1M_OTA.build_flags} ;Flash: [=======   ]  66.3% (used 591656 bytes from 892912 bytes)
                            ${minimal_size.build_flags}
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D USE_CUSTOM_H
                            -D NOTIFIER_SET_NONE
                            -D SHOW_SYSINFO_JSON ;Flash: [=======   ]  67.8% (used 605104 bytes from 892912 bytes)
                            -D VTABLES_IN_IRAM   ;Flash: [=======   ]  67.8% (used 605096 bytes from 892912 bytes)
                            -D BUILD_MINIMAL_OTA
                            ;-Wl,--undefined=_printf_float -Wl,--undefined=_scanf_float
build_unflags             = -DVTABLES_IN_FLASH, -O2, -DPLUGIN_BUILD_MINIMAL_OTA, -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py

[env:MFD_1M_OTA_WIFI]
; this one work for water feeder to keep wifi stable
extends                   = esp8266_1M_OTA
board                     = esp07
board_build.f_flash       = 80000000L
platform                  = ${regular_platform_alt_wifi.platform}
platform_packages         = ${regular_platform_alt_wifi.platform_packages}
lib_ignore                = ${MFD.lib_ignore_for_minimal}
                            ${regular_platform_alt_wifi.lib_ignore}
build_flags               = ${regular_platform_alt_wifi.build_flags} 
                            ${esp8266_1M_OTA.build_flags} ;Flash: [=======   ]  66.3% (used 591656 bytes from 892912 bytes)
                            ${minimal_size.build_flags}
                            -D MFD_PLUGIN_SET_MINIMAL
                            -D DONT_USE_SERVO
                            -D USE_CUSTOM_H
                            -D NOTIFIER_SET_NONE
                            -D SHOW_SYSINFO_JSON ;Flash: [=======   ]  67.8% (used 605104 bytes from 892912 bytes)
                            -D VTABLES_IN_IRAM   ;Flash: [=======   ]  67.8% (used 605096 bytes from 892912 bytes)
                            -D BUILD_MINIMAL_OTA
                            ;-Wl,--undefined=_printf_float -Wl,--undefined=_scanf_float
build_unflags             = -DVTABLES_IN_FLASH, -O2, -DPLUGIN_BUILD_MINIMAL_OTA, -DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py


; ITEAD / SONOFF POW version --------------------
; Sonoff Pow (ESP8266 - HLW8012)
; GPIO00 Button
; GPIO05 HLW8012 Sel output
; GPIO12 Red Led and Relay (0 = Off, 1 = On)
; GPIO13 HLW8012 CF1 voltage / current
; GPIO14 HLW8012 CF power
; GPIO15 Blue Led (0 = On, 1 = Off)
[env:MFD_SONOFF_POW_4M1M]
platform                  = ${normal.platform}
lib_ignore                = ${esp82xx_defaults.lib_ignore} ${MFD.lib_ignore}
build_flags               = ${normal.build_flags} ${esp8266_4M1M.build_flags} ${MFD.build_flags} 
                            -D USE_CUSTOM_H 
                            -D CONTROLLER_SET_NONE 
                            -D USES_C005 
                            -D NOTIFIER_SET_NONE 
                            -D USES_P025 
                            -D USES_P200 
                            -D PLUGIN_SET_SONOFF_POW 
                            -D FEATURE_ADC_VCC=true
board_build.f_cpu         = ${esp8266_4M1M.board_build.f_cpu}
board_build.flash_mode    = qio
board_build.f_flash       = 80000000L
board                     = ${esp8266_4M1M.board}
build_unflags             = ${esp8266_4M1M.build_unflags}
extra_scripts             = pre:tools/pio/generate-compiletime-defines.py
                            post:post_build.py




; SONOFF DUAL: 1024k for esp8285 -------------------------
;PIN	Function
;GIO0	BUTTON 0 (inside header)
;GIO5	L2 RELAY
;GIO9	BUTTON 1 (inside header)
;GIO10	SWITCH (on the case)
;GIO12	L1 RELAY
;GIO13	BLUE LED (inverted)
;
;GIO14  I2C_SCL
;GIO2   I2C_SDA
[env:MFD_ESP8285_SONOFF_DUAL]
extends                   = esp8285_1M_OTA
platform                  = ${regular_platform.platform}
build_unflags             = ${esp8285_1M.build_unflags}
build_flags               = ${regular_platform.build_flags} 
                            ${esp8285_1M_OTA.build_flags} 
                            -D PIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY 
                            -D PLUGIN_SET_SONOFF_DUAL 
                            -D USE_CUSTOM_H
                            -D DONT_USE_SERVO 
                            -D FEATURE_ADC_VCC=true
extra_scripts             = post:post_build.py



#-----------------------------ESP32 Platforms -----------------------
[env:MFD_ESP32_4M316k]
extends                   = esp32_common
lib_ignore                = ${esp32_common.lib_ignore}, ArduinoOTA, Adafruit SGP30 Sensor, Adafruit TCS34725, Adafruit TSL2591 Library, ESP8266_SSD1306, Adafruit ILI9341, Adafruit GFX Library, Adafruit Motor Shield V2 Library, Adafruit MPR121, Adafruit NeoPixel, Adafruit Unified Sensor, AM2320, Blynk, CHT16K33 LED Matrix Library, LiquidCrystal_I2C, RN2xx3 Arduino Library, SparkFun APDS9960 RGB and Gesture Sensor, TinyGPSPlus, MechInputs, SDM, SerialSensors, NewPingESP8266, HLW8012
lib_deps                  = https://github.com/TD-er/ESPEasySerial.git#v2.0.5, https://github.com/lbernstone/Tone, MFRC522
platform                  = ${esp32_common.platform}
build_flags               = ${esp32_common.build_flags}   
                            -D PLUGIN_BUILD_CUSTOM
                            -D MFD_PLUGIN_SET_PROD
                            -D USE_CUSTOM_H
                            -D DONT_USE_SERVO 
                            -D ESP32
                            -D WEBSERVER_NEW_UI
#                            -D USES_P201 ;VBAN
                            -D USES_P202 ;I2S VBAN
                            -D USES_P129 ;RFID
                            -D CONFIG_ESP_SYSTEM_PANIC_PRINT_HALT
#                            -D CORE_DEBUG_LEVEL=5 
#                            -D CONFIG_ARDUHAL_LOG_COLORS
board                     = esp32dev
board_build.flash_mode    = qio
extra_scripts             = ${esp32_common.extra_scripts}
                            post:post_build_ESP32.py
upload_speed              = 921600

[env:MFD_ESP32_4M316k_DEBUG]
extends                   = esp32_common
lib_ignore                = ${esp32_common.lib_ignore}, ArduinoOTA, Adafruit SGP30 Sensor, Adafruit TCS34725, Adafruit TSL2591 Library, ESP8266_SSD1306, Adafruit ILI9341, Adafruit GFX Library, Adafruit Motor Shield V2 Library, Adafruit MPR121, Adafruit NeoPixel, Adafruit Unified Sensor, AM2320, Blynk, CHT16K33 LED Matrix Library, LiquidCrystal_I2C, RN2xx3 Arduino Library, SparkFun APDS9960 RGB and Gesture Sensor, TinyGPSPlus, MechInputs, SDM, SerialSensors, NewPingESP8266, HLW8012
#lib_ignore                = ${esp32_common.lib_ignore},  Adafruit SGP30 Sensor, Adafruit TCS34725, Adafruit TSL2591 Library, ESP8266_SSD1306, Adafruit ILI9341, Adafruit GFX Library, Adafruit Motor Shield V2 Library, Adafruit MPR121, Adafruit NeoPixel, Adafruit Unified Sensor, AM2320, Blynk, CHT16K33 LED Matrix Library, LiquidCrystal_I2C, RN2xx3 Arduino Library, SparkFun APDS9960 RGB and Gesture Sensor, TinyGPSPlus, MechInputs, SDM, SerialSensors, NewPingESP8266, HLW8012
#lib_deps                  = https://github.com/TD-er/ESPEasySerial.git#v2.0.1, Adafruit ILI9341,  Adafruit GFX Library

lib_deps                  = https://github.com/TD-er/ESPEasySerial.git#v2.0.1, https://github.com/lbernstone/Tone, MFRC522
platform                  = ${esp32_common.platform}
build_flags               = ${esp32_common.build_flags}   
                            -D PLUGIN_BUILD_CUSTOM
                            -D PLUGIN_SET_NONE
                            -D NOTIFIER_SET_NONE
                            -D CONTROLLER_SET_NONE
                            -D USE_CUSTOM_H
                            -D DONT_USE_SERVO 
                            -D ESP32
#                            -D WEBSERVER_NEW_UI
#                            -D USES_P201
#                            -D USES_P129
                            -D CONFIG_ESP_SYSTEM_PANIC_PRINT_HALT
                            -D CORE_DEBUG_LEVEL=5 
                            -D CONFIG_ARDUHAL_LOG_COLORS
                            #-D FEATURE_ARDUINO_OTA
board                     = esp32dev
board_build.flash_mode    = qio
extra_scripts             = ${esp32_common.extra_scripts}
                            post:post_build_ESP32.py
upload_speed              = 921600

[env:MFD_ESP32S2_dev]
extends                   = esp32_common
lib_ignore                = ${esp32_common.lib_ignore}, https://github.com/TD-er/ESPEasySerial.git#v2.0.5, ArduinoOTA, Adafruit SGP30 Sensor, Adafruit TCS34725, Adafruit TSL2591 Library, ESP8266_SSD1306, Adafruit ILI9341, Adafruit GFX Library, Adafruit Motor Shield V2 Library, Adafruit MPR121, Adafruit NeoPixel, Adafruit Unified Sensor, AM2320, Blynk, CHT16K33 LED Matrix Library, LiquidCrystal_I2C, RN2xx3 Arduino Library, SparkFun APDS9960 RGB and Gesture Sensor, TinyGPSPlus, MechInputs, SDM, SerialSensors, NewPingESP8266, HLW8012
lib_deps                  = https://github.com/lbernstone/Tone, MFRC522


platform = https://github.com/platformio/platform-espressif32.git
platform_packages = framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git
board = esp32dev
;board = featheresp32-s2
framework = arduino
board_build.mcu = esp32s2
board_build.variant = esp32s2
monitor_speed = 115200

build_flags               = ${esp32_common.build_flags}   
                            -D PLUGIN_BUILD_CUSTOM
                            -D MFD_PLUGIN_SET_PROD
                            -D USE_CUSTOM_H
                            -D DONT_USE_SERVO 
                            -D ESP32
                            -D WEBSERVER_NEW_UI
#                            -D USES_P201 ;VBAN
#                            -D USES_P202 ;I2S VBAN
#                            -D USES_P129 ;RFID
                            -D CONFIG_ESP_SYSTEM_PANIC_PRINT_HALT
#                            -D CORE_DEBUG_LEVEL=5 
#                            -D CONFIG_ARDUHAL_LOG_COLORS
#                            -D DISABLE_SC16IS752_Serial
                            -D DISABLE_SOFTWARE_SERIAL
board_build.flash_mode    = qio
extra_scripts             = ${esp32_common.extra_scripts}
                            post:post_build_ESP32.py
;upload_speed              = 115200
upload_speed = 460800